-- # **Типы таблиц в PostgreSQL: полный обзор**

-- PostgreSQL предлагает богатый набор возможностей для работы с таблицами, 
-- каждая из которых предназначена для решения специфических задач. 
-- В этой статье мы подробно разберём все типы таблиц, их особенности и варианты применения.

-- ## **1. Обычные (базовые) таблицы**

-- Стандартные таблицы — фундаментальная структура хранения данных.

-- ```sql
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- ```

-- **Характеристики:**
-- - Полноценная поддержка индексов, ограничений, триггеров
-- - ACID-совместимость
-- - Поддержка транзакций
-- - Возможность наследования (см. раздел 5)

-- ## **2. Временные таблицы (Temporary Tables)**

-- Существуют только в рамках сессии или транзакции.

-- ```sql
-- Видна только в текущей сессии
CREATE TEMPORARY TABLE temp_sessions (
    session_id VARCHAR(100),
    user_data JSONB
);

-- Автоматически удаляется при завершении транзакции
CREATE TEMPORARY TABLE temp_transaction (
    id INT
) ON COMMIT DROP;
-- ```

-- **Применение:**
-- - Промежуточные вычисления в сложных запросах
-- - Хранение временных данных в ETL-процессах
-- - Изоляция данных между сессиями

-- ## **3. UNLOGGED таблицы**

-- Не записывают данные в WAL (Write-Ahead Log), что ускоряет операции.

-- ```sql
CREATE UNLOGGED TABLE cache_data (
    key VARCHAR(255) PRIMARY KEY,
    value TEXT,
    expires_at TIMESTAMP
);
-- ```

-- **Особенности:**
-- - +50-70% к скорости записи
-- - Данные теряются при аварийном перезапуске сервера
-- - Не реплицируются
-- - Нельзя использовать в транзакциях, требующих гарантий сохранности

-- **Идеально для:**
-- - Кеширования
-- - Временных данных
-- - Статистики, которую можно пересчитать

-- ## **4. Партиционированные таблицы**

-- Разделение одной логической таблицы на физические части.

-- ### **4.1 Range Partitioning**
-- ```sql
CREATE TABLE measurement (
    city_id INT NOT NULL,
    logdate DATE NOT NULL,
    peaktemp INT
) PARTITION BY RANGE (logdate);

CREATE TABLE measurement_y2023 PARTITION OF measurement
    FOR VALUES FROM ('2023-01-01') TO ('2024-01-01');
-- ```

-- ### **4.2 List Partitioning**
-- ```sql
CREATE TABLE sales (
    region TEXT,
    amount DECIMAL
) PARTITION BY LIST (region);

CREATE TABLE sales_europe PARTITION OF sales
    FOR VALUES IN ('EU', 'UK');
-- ```

-- **Преимущества:**
-- - Ускорение запросов с фильтрацией по ключу партиционирования
-- - Упрощение управления большими таблицами (архивация, загрузка)
-- - Возможность хранения партиций на разных дисках

-- ## **5. Наследуемые таблицы (Inheritance)**

-- Особенность PostgreSQL, позволяющая создавать иерархии таблиц.

-- ```sql
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name TEXT,
    price DECIMAL
);

CREATE TABLE books (
    author TEXT,
    pages INT
) INHERITS (products);
-- ```

-- **Особенности поведения:**
-- - Запрос к родительской таблице включает данные из всех потомков
-- - Можно ограничить только родительской таблицей с `ONLY`
-- - Ограничения не наследуются автоматически

-- ## **6. Внешние таблицы (Foreign Data Wrappers)**

-- Доступ к данным за пределами PostgreSQL.

-- ```sql
-- -- Подключение расширения
CREATE EXTENSION postgres_fdw;

-- Создание сервера
CREATE SERVER remote_server
FOREIGN DATA WRAPPER postgres_fdw
OPTIONS (host '10.0.0.5', dbname 'remote_db');

-- Создание внешней таблицы
CREATE FOREIGN TABLE remote_users (
    id INT,
    name TEXT
) SERVER remote_server
OPTIONS (schema_name 'public', table_name 'users');
-- ```

-- **Поддерживаемые источники:**
-- - Другие PostgreSQL сервера
-- - MySQL, Oracle, SQL Server через специальные расширения
-- - CSV, JSON файлы
-- - Веб-сервисы (REST API)

-- ## **7. Системные таблицы**

-- Специальные таблицы, хранящие метаинформацию.

-- ```sql
-- Информация о таблицах
SELECT * FROM pg_catalog.pg_tables;

-- Описание столбцов
SELECT * FROM information_schema.columns;
-- ```

-- **Важные системные каталоги:**
-- - `pg_class` — информация о таблицах и индексах
-- - `pg_attribute` — сведения о столбцах
-- - `pg_index` — данные об индексах

-- ## **8. Таблицы с особыми характеристиками**

-- ### **8.1 WITH OIDS (устаревшее)**
-- ```sql
CREATE TABLE old_style_table (
    name TEXT
) WITH OIDS;
-- ```

-- ### **8.2 Таблицы с настраиваемым заполнением**
-- ```sql
CREATE TABLE custom_fill (
    id INT
) WITH (fillfactor = 70);
-- ```

-- ### **8.3 Таблицы для TimescaleDB (расширение для временных рядов)**
-- ```sql
CREATE TABLE sensor_data (
    time TIMESTAMPTZ NOT NULL,
    sensor_id INT,
    value DOUBLE PRECISION
);

SELECT create_hypertable('sensor_data', 'time');
-- ```

-- ## **Сравнение типов таблиц**

-- | Тип таблицы        | Сохраняется | Реплицируется | ACID | Производительность           | Использование             |
-- |--------------------|-------------|---------------|------|------------------------------|---------------------------|
-- | Обычная            | Да          | Да            | Да   | Средняя                      | Основное хранилище        |
-- | Временная          | Нет         | Нет           | Да   | Высокая                      | Промежуточные данные      |
-- | UNLOGGED           | Нет*        | Нет           | Нет  | Очень высокая                | Кеш, временные данные     |
-- | Партиционированная | Да          | Да            | Да   | Высокая (для больших таблиц) | Большие datasets          |
-- | Наследуемая        | Да          | Да            | Да   | Зависит от реализации        | Спец. случаи наследования |
-- | Внешняя            | Нет         | Нет           | Нет  | Низкая                       | Интеграция с другими БД   |

-- *Данные UNLOGGED таблиц сохраняются между обычными перезапусками, но теряются при сбоях

-- ## **Заключение**

-- PostgreSQL предлагает богатый арсенал типов таблиц для различных сценариев:

-- 1. **Для основных данных** — обычные таблицы
-- 2. **Для временных расчетов** — TEMPORARY таблицы
-- 3. **Для кеширования** — UNLOGGED таблицы
-- 4. **Для больших объемов** — партиционирование
-- 5. **Для интеграции** — внешние таблицы

-- Выбор правильного типа таблицы существенно влияет на производительность и удобство работы с базой данных. 
-- В PostgreSQL вы почти всегда найдете решение, оптимально подходящее для вашей конкретной задачи.