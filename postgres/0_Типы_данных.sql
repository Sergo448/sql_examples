-- # Полный справочник по типам данных PostgreSQL

-- PostgreSQL предлагает одну из самых богатых систем типов данных среди современных СУБД. 
-- Рассмотрим все основные категории и конкретные типы.

-- ## 1. Числовые типы

-- ### 1.1 Целочисленные
-- | Тип              | Диапазон                          | Размер  | Описание                  |
-- |------------------|-----------------------------------|---------|---------------------------|
-- | `smallint`       | -32,768 до 32,767                | 2 байта | Малое целое               |
-- | `integer`        | -2,147,483,648 до 2,147,483,647  | 4 байта | Стандартное целое         |
-- | `bigint`         | ~-9.2e18 до ~9.2e18               | 8 байт  | Большое целое             |
-- | `serial`         | 1 до 2,147,483,647                | 4 байта | Автоинкремент (integer)   |
-- | `bigserial`      | 1 до 9,223,372,036,854,775,807    | 8 байт  | Большой автоинкремент     |

-- ### 1.2 Числа с плавающей точкой
-- | Тип              | Точность               | Размер  | Особенности                     |
-- |------------------|------------------------|---------|---------------------------------|
-- | `real`           | 6 цифр                 | 4 байта | Число с плавающей точкой        |
-- | `double precision` | 15 цифр              | 8 байт  | Двойная точность                |

-- ### 1.3 Точные числовые
-- | Тип              | Описание                              |
-- |------------------|---------------------------------------|
-- | `decimal(p,s)`   | Точное число (p - цифр, s - после .)  |
-- | `numeric(p,s)`   | Синоним decimal                       |
-- | `money`          | Денежный тип (валюта)                 |

-- ## 2. Символьные типы

-- | Тип              | Описание                              | Макс. длина |
-- |------------------|---------------------------------------|-------------|
-- | `char(n)`        | Фиксированная длина, дополняется пробелами | 1GB       |
-- | `varchar(n)`     | Переменная длина с ограничением       | 1GB         |
-- | `text`           | Переменная длина без ограничений      | 1GB         |

-- **Примеры**:
-- sql
CREATE TABLE strings (
    fixed CHAR(10),      -- Всегда 10 символов
    variable VARCHAR(50), -- До 50 символов
    unlimited TEXT        -- Любая длина
);


-- ## 3. Бинарные данные

-- | Тип              | Описание                              |
-- |------------------|---------------------------------------|
-- | `bytea`          | Бинарные данные ("массив байтов")     |
-- | `bit(n)`         | Битовый ряд фиксированной длины       |
-- | `bit varying(n)` | Битовый ряд переменной длины          |

-- ## 4. Дата и время

-- | Тип                  | Описание                              | Пример                |
-- |----------------------|---------------------------------------|-----------------------|
-- | `timestamp`          | Дата и время без таймзоны            | '2023-01-15 14:30:00'|
-- | `timestamptz`        | Дата и время с таймзоной             | '2023-01-15 14:30:00+03'|
-- | `date`               | Только дата                          | '2023-01-15'          |
-- | `time`               | Только время                         | '14:30:00'            |
-- | `timetz`             | Время с таймзоной                    | '14:30:00+03:00'      |
-- | `interval`           | Временной интервал                   | '3 days 04:05:06'     |

-- ## 5. Логический тип

-- | Тип        | Варианты значений                    |
-- |------------|--------------------------------------|
-- | `boolean`  | TRUE, FALSE, NULL (можно 't'/'f', 'yes'/'no', 1/0) |

-- ## 6. Перечисляемые типы

-- sql
CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');
CREATE TABLE person (
    name text,
    current_mood mood
);


-- ## 7. Геометрические типы

-- | Тип          | Описание                | Пример             |
-- |--------------|-------------------------|--------------------|
-- | `point`      | Точка на плоскости      | '(5,12)'           |
-- | `line`       | Бесконечная прямая      | '{1,2,3}'          |
-- | `lseg`       | Отрезок                 | '[(1,2),(3,4)]'    |
-- | `box`        | Прямоугольник           | '(2,2),(0,0)'      |
-- | `path`       | Многоугольник/путь      | '((1,2),(3,4))'    |
-- | `polygon`    | Многоугольник           | '((0,0),(1,1))'    |
-- | `circle`     | Круг                    | '<(0,0),5>'        |

-- ## 8. Сетевые адреса

-- | Тип          | Описание                | Пример             |
-- |--------------|-------------------------|--------------------|
-- | `cidr`       | Сетевой адрес           | '192.168.1.0/24'   |
-- | `inet`       | IP-адрес                | '192.168.1.1'      |
-- | `macaddr`    | MAC-адрес               | '08:00:2b:01:02:03'|

-- ## 9. JSON типы

-- | Тип          | Описание                | Особенности        |
-- |--------------|-------------------------|--------------------|
-- | `json`       | Текст JSON              | Проверка синтаксиса|
-- | `jsonb`      | Бинарный JSON           | Индексируемый, быстрее |

-- **Пример**:
-- sql
CREATE TABLE orders (
    id serial,
    data jsonb
);


-- ## 10. Массивы

-- Любой тип можно превратить в массив, добавив `[]`:
-- sql
CREATE TABLE sal_emp (
    name text,
    pay_by_quarter integer[],
    schedule text[][]
);


-- ## 11. Составные типы

-- Можно создавать собственные сложные типы:
-- sql
CREATE TYPE inventory_item AS (
    name text,
    supplier_id integer,
    price numeric
);

CREATE TABLE on_hand (
    item inventory_item,
    count integer
);


-- ## 12. Псевдотипы

-- Специальные типы для внутреннего использования:
-- - `any` - любой тип
-- - `anyarray` - любой массив
-- - `void` - отсутствие значения

-- ## 13. Другие специальные типы

-- | Тип          | Описание                |
-- |--------------|-------------------------|
-- | `uuid`       | Уникальный идентификатор|
-- | `xml`        | XML-данные              |
-- | `tsvector`   | Текстовый поиск (вектор)|
-- | `tsquery`    | Текстовый поиск (запрос)|
-- | `pg_lsn`     | Позиция в WAL           |

-- ## Выбор типа данных: рекомендации

-- 1. **Для идентификаторов**: `serial`, `bigserial` или `uuid`
-- 2. **Для денежных значений**: `numeric(19,4)` или `money`
-- 3. **Для даты/времени**: `timestamptz` (учет часовых поясов)
-- 4. **Для текста**: `varchar(n)` при известной длине, иначе `text`
-- 5. **Для JSON**: `jsonb` (поддерживает индексацию)

-- ## Заключение

-- PostgreSQL предлагает:
-- - Богатый набор встроенных типов
-- - Возможность создания пользовательских типов
-- - Специализированные типы для разных задач
-- - Гибкость при работе с разными данными

-- Правильный выбор типа данных улучшает:
-- - Производительность запросов
-- - Целостность данных
-- - Эффективность хранения