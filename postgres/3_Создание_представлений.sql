-- # **Представления (Views) в PostgreSQL: Полное руководство**

-- Представления (Views) в PostgreSQL — это мощный инструмент для работы с данными,
-- позволяющий создавать виртуальные таблицы на основе SQL-запросов. Они упрощают сложные операции,
-- повышают безопасность и обеспечивают уровень абстракции для приложений. 
-- В этой статье вы узнаете, как эффективно использовать представления в PostgreSQL.

-- ---

-- ## **Что такое представления?**
-- **Представление** — это виртуальная таблица, которая:
-- - **Не хранит данные физически**. Результат формируется динамически при каждом обращении к представлению.
-- - **Основана на SQL-запросе**, который может объединять данные из нескольких таблиц, применять фильтры или агрегации.
-- - **Может использоваться как обычная таблица** в SELECT, JOIN и других операциях.

---

-- ## **Типы представлений в PostgreSQL**

-- ### **1. Обычные представления (Views)**
-- - **Динамические**: Данные обновляются при каждом запросе.
-- - **Синтаксис**:
--   ```sql
CREATE VIEW view_name AS
    SELECT column1, column2
        FROM table_name
        WHERE condition;
-- ```

-- **Пример**:
-- ```sql
CREATE VIEW active_users AS
    SELECT id, name, email
        FROM users
        WHERE is_active = true;
-- ```

-- ### **2. Материализованные представления (Materialized Views)**
-- - **Хранят данные физически**: Результат запроса сохраняется на диске.
-- - **Требуют обновления**: Данные актуализируются командой `REFRESH`.
-- - **Синтаксис**:
-- ```sql
CREATE MATERIALIZED VIEW mv_name AS
    SELECT column1, column2
        FROM table_name
        WHERE condition;
-- ```

-- **Пример**:
-- ```sql
CREATE MATERIALIZED VIEW monthly_sales AS
    SELECT 
        date_trunc('month', order_date) AS month,
        SUM(amount) AS total_sales
    FROM orders
    GROUP BY month;
-- ```

-- **Обновление материализованного представления**:
-- ```sql
REFRESH MATERIALIZED VIEW monthly_sales;
-- ```

---

-- ## **Зачем использовать представления?**

-- ### **1. Упрощение сложных запросов**
-- Скрывайте сложность JOIN-ов и агрегаций за простым интерфейсом:
-- ```sql
-- Создание представления
CREATE VIEW order_details AS
    SELECT 
        o.id, 
        o.order_date, 
        c.name AS customer_name,
        SUM(p.price * oi.quantity) AS total
    FROM orders o
    JOIN customers c ON o.customer_id = c.id
    JOIN order_items oi ON o.id = oi.order_id
    JOIN products p ON oi.product_id = p.id
    GROUP BY o.id, c.name;

-- Использование
SELECT * FROM order_details WHERE total > 1000;
-- ```

-- ### **2. Безопасность данных**
-- Ограничьте доступ к конфиденциальным столбцам:
-- ```sql
CREATE VIEW public_employee_info AS
    SELECT id, first_name, last_name, department
    FROM employees;
-- ```
-- Затем настройте права доступа так, чтобы пользователи работали только с представлением, а не с исходной таблицей.

-- ### **3. Абстракция для приложений**
-- Измените структуру таблиц, не меняя код приложения. Достаточно обновить представление.

---

-- ## **Изменяемые представления (Updatable Views)**
-- Некоторые представления позволяют выполнять операции `INSERT`, `UPDATE`, `DELETE`, если они:
-- - Созданы на основе одной таблицы.
-- - Не содержат агрегаций, DISTINCT, GROUP BY, оконных функций.

-- **Пример**:
-- ```sql
CREATE VIEW editable_users AS
    SELECT id, name, email
    FROM users
    WHERE is_active = true;

-- Обновление через представление
UPDATE editable_users 
SET email = 'new@example.com' 
WHERE id = 1;
-- ```

-

-- ## **Преимущества и ограничения**

-- | **Преимущества**                     | **Ограничения**                                                |
-- |--------------------------------------|----------------------------------------------------------------|
-- | Упрощение запросов                   | Обычные представления могут быть медленными для больших данных |
-- | Повышение безопасности               | Материализованные представления требуют обновления             |
-- | Абстракция данных                    | Не все операции доступны в изменяемых представлениях           |

-- ---

-- ## **Лучшие практики**
-- 1. **Используйте материализованные представления** для сложных агрегаций, если данные меняются редко.
-- 2. **Оптимизируйте базовые запросы**: Убедитесь, что запросы внутри представлений используют индексы.
-- 3. **Документируйте представления**: Добавляйте комментарии для пояснения логики:
--    ```sql
COMMENT ON VIEW active_users IS 'Список активных пользователей';
--    ```
-- 4. **Управляйте правами доступа**:
-- ```sql
GRANT SELECT ON active_users TO analyst_role;
-- ```

---

-- ## **Примеры использования**

-- ### **1. Агрегация данных**
-- ```sql
CREATE VIEW department_stats AS
    SELECT 
        department_id,
        COUNT(*) AS employees_count,
        AVG(salary) AS avg_salary
    FROM employees
    GROUP BY department_id;
-- ```

-- ### **2. Фильтрация и объединение таблиц**
-- ```sql
CREATE VIEW high_value_orders AS
    SELECT 
        o.id, 
        c.name AS customer,
        o.total_amount
    FROM orders o
    JOIN customers c ON o.customer_id = c.id
    WHERE o.total_amount > 5000;
-- ```

---

-- ## **Заключение**
-- Представления в PostgreSQL — это гибкий инструмент для:
-- - **Сокрытия сложности** запросов.
-- - **Повышения безопасности** данных.
-- - **Оптимизации производительности** через материализованные представления.

-- Используйте их для создания удобного и безопасного слоя доступа к данным, особенно в больших и сложных базах.