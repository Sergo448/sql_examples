-- # **Типы данных в ClickHouse: Полный обзор**

-- ClickHouse — это высокопроизводительная колоночная СУБД, оптимизированная для аналитики больших данных. Одной из её ключевых особенностей является богатый набор типов данных, которые обеспечивают эффективное хранение, сжатие и обработку информации. В этой статье мы рассмотрим **все типы данных ClickHouse**, их особенности и примеры использования.

-- ---

-- ## **1. Числовые типы**

-- Используются для хранения чисел. Выбор типа зависит от диапазона значений и требуемой точности.

-- ### **Целочисленные**
-- | Тип           | Диапазон                                 | Пример          |
-- |---------------|------------------------------------------|-----------------|
-- | `Int8`        | -128 до 127                              | `Int8(42)`      |
-- | `Int16`       | -32768 до 32767                          | `Int16(-15000)` |
-- | `Int32`       | -2³¹ до 2³¹-1                            | `Int32(10^9)`   |
-- | `Int64`       | -2⁶³ до 2⁶³-1                            | `Int64(10^18)`  |
-- | `UInt8`       | 0 до 255                                 | `UInt8(200)`    |
-- | `UInt16`      | 0 до 65535                               | `UInt16(50000)` |
-- | `UInt32`      | 0 до 2³²-1                               | `UInt32(4e9)`   |
-- | `UInt64`      | 0 до 2⁶⁴-1                               | `UInt64(1e19)`  |

-- **Совет:** Используйте минимально возможный тип для экономии памяти. Например, для возраста человека подойдет `UInt8`.

-- ### **Числа с плавающей точкой**
-- | Тип       | Точность          | Пример           |
-- |-----------|-------------------|------------------|
-- | `Float32` | 7 знаков          | `Float32(3.14)`  |
-- | `Float64` | 15–17 знаков      | `Float64(2.718)` |

-- ### **Числа с фиксированной точностью (Decimal)**
-- Идеальны для финансовых расчетов.
-- | Тип                | Пример                     |
-- |--------------------|----------------------------|
-- | `Decimal32(S)`     | `Decimal32(4)` → 4 знака   |
-- | `Decimal64(S)`     | `Decimal64(8)` → 8 знаков  |
-- | `Decimal128(S)`    | `Decimal128(16)` → 16 знаков |

-- ```sql
-- CREATE TABLE prices (
--     amount Decimal32(2)
-- ) ENGINE = MergeTree();
-- ```

-- ---

-- ## **2. Строковые типы**

-- ### **Текстовые данные**
-- | Тип             | Описание                                | Пример               |
-- |-----------------|-----------------------------------------|----------------------|
-- | `String`        | Строка произвольной длины               | `String('Hello')`    |
-- | `FixedString(N)`| Строка фиксированной длины `N` байт     | `FixedString(10)`    |

-- **Особенности:**
-- - `FixedString` заполняет строку нулевыми байтами, если длина меньше `N`.
-- - Для хранения бинарных данных используйте `String`.

-- ### **Специализированные строковые типы**
-- | Тип       | Описание                          | Пример                |
-- |-----------|-----------------------------------|-----------------------|
-- | `UUID`    | Уникальный идентификатор (16 байт)| `UUID('...')`         |
-- | `IPv4`    | IPv-адрес (4 байта)               | `IPv4('192.168.0.1')` |
-- | `IPv6`    | IPv-адрес (16 байт)               | `IPv6('2001:db8::1')` |

-- ---

-- ## **3. Дата и время**

-- ### **Дата**
-- | Тип         | Диапазон              | Формат         | Пример              |
-- |-------------|-----------------------|----------------|---------------------|
-- | `Date`      | 1970-01-01 до 2149-06-06 | `YYYY-MM-DD`   | `Date('2023-10-01')`|
-- | `Date32`    | 1900-01-01 до 2299-12-31 | `YYYY-MM-DD`   | `Date32('2100-01-01')` |

-- ### **Время**
-- | Тип             | Точность       | Пример                    |
-- |-----------------|----------------|---------------------------|
-- | `DateTime`      | Секунды        | `DateTime('2023-10-01 12:00:00')` |
-- | `DateTime64`    | Наносекунды    | `DateTime64(3, 'UTC')` → миллисекунды |

-- **Пример использования:**
-- ```sql
CREATE TABLE logs (
    event_time DateTime,
    message String
) 
ENGINE = MergeTree()
ORDER BY event_time;
-- ```

---

-- ## **4. Составные типы**

-- ### **Массивы (Array)**
-- Хранят последовательности элементов одного типа.
-- ```sql
SELECT array(1, 2, 3) AS numbers; -- Array(Int8)
-- ```

-- ### **Кортежи (Tuple)**
-- Группируют элементы разных типов.
-- ```sql
SELECT tuple(1, 'text', now()) AS mixed_data; -- Tuple(Int8, String, DateTime)
-- ```

-- ### **Вложенные структуры (Nested)**
-- Используются для денормализованных данных.
-- ```sql
CREATE TABLE users (
    id UInt32,
    name String,
    orders Nested (
        order_id UInt64,
        amount Float32
    )
)
ENGINE = MergeTree();
-- ```

---

-- ## **5. Специальные типы**

-- ### **Nullable**
-- Позволяет хранить `NULL` в дополнение к значениям основного типа.
-- ```sql
CREATE TABLE products (
    price Nullable(Float32)
) 
ENGINE = MergeTree();
-- ```

-- ### **LowCardinality**
-- Оптимизирует хранение столбцов с малым количеством уникальных значений.
-- ```sql
CREATE TABLE events (
    status LowCardinality(String) -- Например, 'success', 'error'
) 
ENGINE = MergeTree();
-- ```

-- ### **Enum**
-- Хранит строки как числа для экономии места.
-- ```sql
CREATE TABLE orders (
    status Enum('pending' = 1, 'shipped' = 2, 'delivered' = 3)
) 
ENGINE = MergeTree();
-- ```

---

-- ## **6. Геопространственные типы**

-- Для работы с геоданными через расширение **Mercator** или **WGS84**:
-- ```sql
CREATE TABLE points (
    point Tuple(Float64, Float64) -- (широта, долгота)
) 
ENGINE = MergeTree();
-- ```

---

-- ## **7. Другие типы**

-- | Тип                | Описание                            |
-- |--------------------|--------------------------------==---|
-- | `Bool`             | Логический тип (аналог `UInt8` 0/1) |
-- | `JSON`             | Хранение JSON (в виде `String`)     |
-- | `Map(key, value)`  | Словари (экспериментальный тип)     |

-- ---

-- ## **Рекомендации по выбору типов**

-- 1. **Экономьте память:**
--    - Используйте `UInt8` вместо `Int32` для небольших чисел.
--    - Применяйте `LowCardinality` для строк с малым количеством уникальных значений.

-- 2. **Точность vs производительность:**
--    - Для финансовых данных выбирайте `Decimal`.
--    - Для аналитики подойдут `Float32/64`.

-- 3. **Специализированные типы:**
--    - Используйте `IPv4/IPv6` вместо строк для IP-адресов.
--    - Для дат и времени всегда указывайте временную зону в `DateTime`.

-- ---

-- ## **Пример таблицы с разными типами**
-- ```sql
CREATE TABLE analytics (
    event_date Date,
    event_time DateTime('UTC'),
    user_id UUID,
    device_ip IPv4,
    status Enum('active' = 1, 'inactive' = 2),
    tags Array(String),
    metrics Map(String, Float32)
)
ENGINE = MergeTree()
ORDER BY (event_date, event_time);
-- ```

-- ---

-- ## **Заключение**
-- ClickHouse предоставляет богатый набор типов данных для решения любых задач — от хранения простых 
-- чисел до сложных геопространственных объектов. Правильный выбор типа данных:
-- - Уменьшает объем хранимой информации.
-- - Ускоряет выполнение запросов.
-- - Упрощает анализ данных.

-- Изучите документацию [ClickHouse](https://clickhouse.com/docs/ru/sql-reference/data-types/)
-- для углубленного понимания каждого типа.