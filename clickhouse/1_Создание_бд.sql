-- # **Создание базы данных в ClickHouse: аналог схемы в PostgreSQL**

-- В ClickHouse база данных играет роль, аналогичную схеме (schema) в PostgreSQL,
-- позволяя логически группировать таблицы, представления и другие объекты.
-- Хотя ClickHouse не поддерживает вложенные схемы внутри баз данных, сама база данных служит основным контейнером
-- для организации данных. В этой статье вы узнаете, как создавать и управлять базами данных в ClickHouse,
-- а также как это соотносится с работой в PostgreSQL.

---

-- ## **Сравнение с PostgreSQL**

-- | **PostgreSQL**                     | **ClickHouse**                     |
-- |------------------------------------|------------------------------------|
-- | Схема (`schema`) внутри базы данных | База данных (`database`)           |
-- | Возможность создания нескольких схем в одной БД | Одна БД = одна «схема» |
-- | `CREATE SCHEMA schema_name;`       | `CREATE DATABASE db_name;`         |

-- В ClickHouse база данных — это верхнеуровневый объект, который объединяет таблицы, материализованные представления и словари.
-- Для изоляции данных (как в схемах PostgreSQL) используются отдельные базы.

---

-- ## **Создание базы данных**

-- ### **Базовый синтаксис**
-- ```sql
CREATE DATABASE [IF NOT EXISTS] db_name 
    [ENGINE = engine_name];
-- ```

-- - **`IF NOT EXISTS`**: Опционально. Позволяет избежать ошибки, если база уже существует.
-- - **`ENGINE`**: Движок базы данных (по умолчанию — `Atomic`).

-- ### **Пример**
-- ```sql
CREATE DATABASE IF NOT EXISTS analytics 
    ENGINE = Atomic;
-- ```

---

-- ## **Движки баз данных**

-- ClickHouse поддерживает несколько движков для баз данных, определяющих их поведение:

-- | Движок       | Описание                                                                                                      |
-- |--------------|---------------------------------------------------------------------------------------------------------------|
-- | **Atomic**   | **По умолчанию.** Поддерживает атомарные DDL-операции (транзакционное создание/удаление таблиц).              |
-- | **Ordinary** | Устаревший движок. Не поддерживает атомарность операций.                                                      |
-- | **Lazy**     | Оптимизирован для большого количества мелких таблиц. Данные загружаются в память только при первом обращении. |
-- | **Memory**   | Хранит данные в оперативной памяти. Подходит для временных данных.                                            |

-- ### **Пример с движком Lazy**
-- ```sql
CREATE DATABASE temporary_data 
    ENGINE = Lazy;
-- ```

---

-- ## **Управление базами данных**

-- ### **1. Просмотр списка баз**
-- ```sql
SHOW DATABASES;
-- ```

-- ### **2. Удаление базы**
-- ```sql
DROP DATABASE [IF EXISTS] db_name;
-- ```

-- ### **3. Переименование базы**
-- ```sql
RENAME DATABASE old_name TO new_name;
-- ```

-- ### **4. Использование базы**
-- ```sql
USE db_name;
-- или указывать базу перед таблицей: 
SELECT * FROM db_name.table;
-- ```

---

-- ## **Создание таблиц внутри базы**

-- После создания базы добавляйте в неё таблицы, как в схему PostgreSQL:

-- ```sql
CREATE TABLE analytics.events (
    event_date Date,
    event_time DateTime,
    user_id UInt32,
    action String
) 
ENGINE = MergeTree()
ORDER BY (event_date, user_id);
-- ```

---

-- ## **Пример: аналог схемы PostgreSQL**

-- **В PostgreSQL** вы создаете схему и таблицу внутри нее:
-- ```sql
CREATE SCHEMA analytics;
CREATE TABLE analytics.events (...);
-- ```

-- **В ClickHouse** вместо схемы создается отдельная база данных:
-- ```sql
CREATE DATABASE analytics;
CREATE TABLE analytics.events (...);
-- ```

---

-- ## **Рекомендации**

-- 1. **Используйте Atomic** для большинства случаев — это безопасно и надежно.
-- 2. **Избегайте Ordinary**, так как он устарел и не поддерживает атомарность.
-- 3. **Группируйте связанные таблицы** в одну базу данных, как в схему PostgreSQL.
-- 4. **Разделяйте данные по базам** для разных окружений (dev, prod) или проектов.

-- ---

-- ## **Права доступа**

-- Права в ClickHouse управляются на уровне баз данных и таблиц, аналогично схемам в PostgreSQL:
-- ```sql
GRANT SELECT ON analytics.* TO user_name;
-- ```

---

-- ## **Заключение**

-- В ClickHouse база данных — это аналог схемы PostgreSQL, предоставляющий логическую изоляцию данных. Создавая отдельные базы, вы можете:
-- - Организовывать таблицы по функциональности.
-- - Упрощать управление правами доступа.
-- - Использовать разные движки для оптимизации хранения.

-- **Пример итоговой структуры:**
-- ```sql
-- Аналог схемы "analytics" в PostgreSQL
CREATE DATABASE analytics ENGINE = Atomic;

-- Таблицы внутри "аналога схемы"
CREATE TABLE analytics.events (...);
CREATE TABLE analytics.users (...);
CREATE MATERIALIZED VIEW analytics.daily_stats (...);
-- ```

-- Теперь вы знаете, как эффективно использовать базы данных в ClickHouse для организации своих проектов!